//@author wycliffe
package com.wycliffe.codility;

public class BinaryToIntegerOperations {

    public static void main(String[] args) {
        //String
        String S = "11111111111111111111111111111001";
        BinaryToIntegerOperations obj = new BinaryToIntegerOperations();
        obj.solution(S);
    }

    public static boolean isEven(long n) {
        return (n % 2 == 0);
    }

    public int solution(String S) {
        final int MAX_VALUE =0;
        int counter = 0; //initialize counter for steps
        int result = 0; //initialize computational temp value 
        
        int v = Integer.parseInt(S,2);   //initialize value from String to Long
        if(v<0){
             System.out.println("The value is:\n" + v);
            return v;
            
        }
        
        else{
        System.out.println("The value:\n" + v);
        if(v>(int) Math.pow(10, 6)){
            return v;
        }
        else
            while (v != 0) { // loop time complexity
            if (isEven(v)) {
                result = v / 2;
                v = result;
                
                counter++; //todo memory usage
                System.out.printf("Result is: %d%n", result);
            } else {
                result = v - 1;
                v = result;
                counter++;// stack memory vs heap
                System.out.printf("Result is: %d%n", result);
            }
        }
        
        System.out.printf("Number of steps are:: %d%n", counter);
        return counter;
    }
    }
}
